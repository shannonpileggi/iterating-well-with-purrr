---
title: "Iterating well with purrr"
author: "Shannon Pileggi"
footer:  "[Iterating well with purrr](https://github.com/shannonpileggi/iterating-well-with-purrr)"
logo: "img/purrr-logo.png"
format: 
  revealjs: 
    theme: slides.scss
    transition: fade
    slide-number: true
editor: visual
execute:
  freeze: auto
---

```{r}
library(tidyverse)
library(countdown)
```


```{r font-awesome-color}
# fill for font awesome icons
fa_fill <- "#5B888C"
```

# Introduction

## Shannon Pileggi

`r fontawesome::fa("link", fill = "#5B888C")` [pipinghotdata.com](https://www.pipinghotdata.com/)

`r fontawesome::fa("twitter", fill = "#5B888C")` [\@PipingHotData](https://twitter.com/PipingHotData)

`r fontawesome::fa("linkedin", fill = "#5B888C")` [linkedin.com/in/shannon-m-pileggi/](https://www.linkedin.com/in/shannon-m-pileggi/)

`r fontawesome::fa("github", fill = "#5B888C")` [github.com/shannonpileggi](https://github.com/shannonpileggi/)

`r fontawesome::fa("paper-plane", fill = "#5B888C")` [shannon\@pipinghotdata.com](mailto:shannon@pipinghotdata.com)

## Acknowledgements

<br> 
Quarto slide styling was adapted from Mine Çetinkaya-Rundel's Stat 210 course ([website](https://sta210-s22.github.io/website/), [slide source](https://github.com/sta210-s22/website/tree/main/slides)).
<br> 
<br> 
Workshop materials have been adapted from the 2020 RStudio [What They Forgot To Teach You About R](https://rstats-wtf.github.io/wtf-2020-rsc/) Workshop.
<br>
<br>
This work is licensed under a [Creative Commons Attribution-ShareAlike 4.0 International License](https://creativecommons.org/licenses/by-sa/4.0/) (CC BY-SA4.0).




## Checklist

<br>

`r fontawesome::fa("check", fill = fa_fill)` R installed? Pretty recent?

&nbsp;&nbsp;&nbsp;&nbsp; Current version 4.2.0

`r fontawesome::fa("check", fill = fa_fill)` RStudio installed?

&nbsp;&nbsp;&nbsp;&nbsp; I'm on build 485

`r fontawesome::fa("check", fill = fa_fill)` Have these packages?

&nbsp;&nbsp;&nbsp;&nbsp; `tidyverse` (includes `purrr`)

&nbsp;&nbsp;&nbsp;&nbsp; `repurrrsive` 

## Additional resources

* Jenny Bryan purrr tutorial<br> [https://jennybc.github.io/purrr-tutorial/](https://jennybc.github.io/purrr-tutorial/)

* Charlotte Wickham purrr tutorial [https://github.com/cwickham/purrr-tutorial](https://github.com/cwickham/purrr-tutorial)

* Jenny Bryan row-oriented workflows workshop [https://github.com/jennybc/row-oriented-workflows](https://github.com/jennybc/row-oriented-workflows)

* Advanced R by Hadley Wickham, Ch 9 Functionals [https://adv-r.hadley.nz/functionals.html](https://adv-r.hadley.nz/functionals.html)

# Aside on pipes 

## Pipes

* 2014+ magrittr pipe `%>%` 

* 2021+ (R $\geq$ 4.1.0) native R pipe `|>`

* 2022 Isabella Velásquez Understanding the native R pipe |> <br>
[https://ivelasq.rbind.io/blog/understanding-the-r-pipe/](https://ivelasq.rbind.io/blog/understanding-the-r-pipe/)


```{r echo=TRUE, eval=FALSE}
whatever(arg1, arg2, arg3, ...)

arg1 %>% 
  whatever(arg2, arg3)

mean(0:10)
0:10 %>% mean()
```

##

![](img/foo-foo.png)

::: footer
<https://r4ds.had.co.nz/pipes.html#pipes>
:::

# Iterating without purrr

## Gapminder example

```{r, echo = TRUE}
library(gapminder)
library(tidyverse)
```

:::: {.columns}

::: {.column width="70%"}

```{r, echo = TRUE}
gapminder
```

:::

::: {.column width="30%"}

```{r, echo = TRUE}
gapminder %>% 
  count(continent)
```

:::

::::

## 

::: question
What am I doing? Are there mistakes?
:::

```{r, echo = TRUE, eval = FALSE}
africa <- gapminder[gapminder$continent == "Africa", ]
africa_mm <- max(africa$lifeExp) - min(africa$lifeExp)

americas <- gapminder[gapminder$continent == "Americas", ]
americas_mm <- max(americas$lifeExp) - min(americas$lifeExp)

asia <- gapminder[gapminder$continent == "Asia", ]
asia_mm <- max(asia$lifeExp) - min(africa$lifeExp)

europe <- gapminder[gapminder$continent == "Europe", ]
europe_mm <- max(europe$lifeExp) - min(europe$lifeExp)

oceania <- gapminder[gapminder$continent == "Oceania", ]
oceania_mm <- max(europe$lifeExp) - min(oceania$lifeExp)

cbind(
  continent = c("Africa", "Asias", "Europe", "Oceania"),
  max_minus_min = c(africa_mm, americas_mm, asia_mm, europe_mm, oceania_mm)
  )
```

```{r}
countdown(minutes = 1, bottom = "30%", right = "-10%")
```

## Discussion

::: question

1. What are the drawbacks of this code?

2. How would you do it instead?
:::

```{r}
countdown(minutes = 1)
```


## An alternative solution

```{r, echo = TRUE, eval=FALSE}
gapminder %>%
 group_by(continent) %>%
 summarize(max_minus_min = max(lifeExp) - min(lifeExp))
```

. . .

:::: {.columns}

::: {.column width="50%"}

`group_by` approach

```{r}
gapminder %>%
 group_by(continent) %>%
 summarize(max_minus_min = max(lifeExp) - min(lifeExp))
```


:::


::: {.column width="50%"}

previous approach

```{r}
library(gapminder)
africa <- gapminder[gapminder$continent == "Africa", ]
africa_mm <- max(africa$lifeExp) - min(africa$lifeExp)

americas <- gapminder[gapminder$continent == "Americas", ]
americas_mm <- max(americas$lifeExp) - min(americas$lifeExp)

asia <- gapminder[gapminder$continent == "Asia", ]
asia_mm <- max(asia$lifeExp) - min(africa$lifeExp)

europe <- gapminder[gapminder$continent == "Europe", ]
europe_mm <- max(europe$lifeExp) - min(europe$lifeExp)

oceania <- gapminder[gapminder$continent == "Oceania", ]
oceania_mm <- max(europe$lifeExp) - min(oceania$lifeExp)

cbind(
  continent = c("Africa", "Asias", "Europe", "Oceania"),
  max_minus_min = c(africa_mm, americas_mm, asia_mm, europe_mm, oceania_mm)
  )
```

:::

::::

## More iteration: plotting

```{r}
gapminder %>% 
  ggplot(aes(x = year, y = gdpPercap)) +
  geom_line(aes(group = country), color = "gray") +
  facet_wrap(~ continent, ncol = 5) +
  stat_summary(geom = "line", fun = mean, color = "blue", lwd = 1.5) +
  scale_y_continuous(labels=scales::dollar_format()) +
  theme_bw()
```


::: {.notes}
Two sources of iteration: countries and continents
:::

## More iteration: making strings

```{r, echo = TRUE}
year <- 2017:2021
location <- c("Orlando", "San Diego", "Austin", "San Francisco", "remote")

conf <- rep_len("", length(year))
for (i in seq_along(conf)) {
 conf[i] <- paste0("The ", year[i], " RStudio Conference was in ", location[i], ".")
}
conf
```

<br>

. . .


::: question
Can you think of other ways to do this?
:::

```{r}
countdown(minutes = 1, bottom = "-10%", right = "-10%")
```


## More iteration: making strings, cont.

```{r, echo = TRUE}
year <- 2017:2021
location <- c("Orlando", "San Diego", "Austin", "San Francisco", "remote")
```

<brshort>

```{r, echo = TRUE}
paste0("The ", year, " RStudio Conference was in ", location, ".")
```

<brshort>

```{r, echo = TRUE}
glue::glue("The {year} RStudio Conference was in {location}.")
```

. . .

Some R functions are _vectorized_.


# Introducing purrr

## But what if you really need to iterate? {background-color="#343838", position = "center"}

![](img/purrr-logo.png)

## Working with lists 1 {background-color="black"}

![](img/drink-water.gif)



## Working with lists 2 {background-color="black"}


```{r}
knitr::include_graphics("img/drink-water.gif")
```

::: footer
<https://media.giphy.com/media/Bqn8Z7xdPCFy0/giphy.gif>
:::

# Iterating with purrr

